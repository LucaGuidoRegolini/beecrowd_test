import { Injectable, Inject } from '@nestjs/common';
import { IMovieRepository } from '../../domain/repositories/movie.repository';
import { Movie } from '../../domain/entities/movie.entity';
import { OmdbService } from '../../infrastructure/services/omdb.service';
import { ReviewService } from './review.service';
import { Review } from '../../domain/entities/review.entity';

@Injectable()
export class MovieService {
  constructor(
    @Inject('IMovieRepository')
    private readonly movieRepository: IMovieRepository,
    private readonly omdbService: OmdbService,
    private readonly reviewService: ReviewService,
  ) {}

  async createMovieWithReview(
    imdbId: string,
    userOpinion: string,
    userRating: number,
  ): Promise<Movie> {
    let movie = await this.movieRepository.findByImdbId(imdbId);

    if (!movie) {
      const omdbMovie = await this.omdbService.getMovieByImdbId(imdbId);
      movie = await this.movieRepository.save(
        Movie.create({
          imdbId: omdbMovie.imdbID,
          title: omdbMovie.Title,
          year: parseInt(omdbMovie.Year),
          genre: omdbMovie.Genre,
          director: omdbMovie.Director,
          actors: omdbMovie.Actors.split(', '),
          imdbRating: parseFloat(omdbMovie.imdbRating),
          plot: omdbMovie.Plot,
        }),
      );
    }

    // Create the review
    const review = new Review(
      '', // id will be generated by repository
      movie.id,
      userOpinion,
      userRating,
      new Date(),
      new Date(),
    );
    await this.reviewService.createReview(review);

    // Return movie with the new review
    const movieWithReview = await this.movieRepository.findByImdbId(imdbId);
    if (!movieWithReview) {
      throw new Error('Movie not found after review creation');
    }
    return movieWithReview;
  }

  async searchMovies(title?: string, year?: number): Promise<Movie[]> {
    return this.movieRepository.searchByTitleAndYear(title, year);
  }
}
